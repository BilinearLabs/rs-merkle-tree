# Main CI Rust workflow
name: Rust Main

env:
  CARGO_TERM_COLOR: always

# Run for every event affecting the main branch
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Cargo.**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Cargo.**'
  workflow_dispatch:

jobs:
  fmt:
    name: Rust formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt clippy
      - name: Enforce formatting
        run: cargo fmt --check

  build:
    name: Source code builder
    needs: fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt clippy
      - name: Build with all features
        run: cargo check --all-features --future-incompat-report --locked

  clippy:
    name: Clippy linter
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt clippy
      - name: Linting with all features
        run: cargo clippy --all-features --no-deps -- -D warnings

  # Comprehensive test with all features
  test:
    name: Test & Coverage
    needs: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
      - name: Install tarpaulin (coverage)
        run: cargo install cargo-tarpaulin
      - name: Tests with all features
        run: cargo test --all-features
      - name: Generate code coverage
        run: cargo tarpaulin --verbose --all-features --timeout 120 --out xml
